/*
 * Copyright 2019 is-land
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

apply from: "$rootDir/gradle/dependencies.gradle"

/**
 * Noted: this module should NOT have any production code!!! by chia
 */
dependencies {
  /**
   * scala plugin complains that we don't put scala library in production scope... by chia
   */
  implementation libs.scalaLibrary
  implementation libs.scalaReflect
  implementation project(':ohara-common')
  implementation project(':ohara-client')
  implementation project(':ohara-kafka')
  implementation project(':ohara-configurator')
  implementation project(':ohara-connector')
  implementation project(':ohara-agent')
  implementation project(':ohara-testing-util')
  implementation project(':ohara-metrics')
  implementation project(':ohara-streams')
  implementation libs.kafkaConnectRuntime
  testImplementation libs.scalaLogging
  testImplementation libs.sprayJson
  // our it env use postgresql
  testImplementation libs.postgresql

  /**
   * Jar conflict between Hadoop & Kafka:
   *    * Jersey: Hadoop use jersey 1.x, Kafka use jersey 2.x
   *        * Solve running Kafka Connect mini cluster failed. OHARA-103
   *    * Jetty: Hadoop use org.mortbay.jetty 6.1.x, Kafka use use newer version(org.eclipse.jetty)
   *        * Exclude older release.
   *    * Zookeeper: Hadoop use Zookeeper 3.4.6, Kafka use newer version
   *        * Exclude older release.
   */
  testImplementation(libs.hadoopCommon) {
    exclude group: 'com.sun.jersey', module: 'jersey-core'
    exclude group: 'com.sun.jersey', module: 'jersey-json'
    exclude group: 'com.sun.jersey', module: 'jersey-servlet'
    exclude group: 'com.sun.jersey', module: 'jersey-server'
    exclude group: 'org.mortbay.jetty', module: 'jetty'
    exclude group: 'org.mortbay.jetty', module: 'jetty-util'
    exclude group: 'org.apache.zookeeper', module: 'zookeeper'
  }
  testImplementation (libs.hadoopHDFS) {
    exclude group: 'com.sun.jersey', module: 'jersey-core'
    exclude group: 'com.sun.jersey', module: 'jersey-json'
    exclude group: 'com.sun.jersey', module: 'jersey-servlet'
    exclude group: 'com.sun.jersey', module: 'jersey-server'
    exclude group: 'org.mortbay.jetty', module: 'jetty'
    exclude group: 'org.mortbay.jetty', module: 'jetty-util'
  }
  testImplementation project(":ohara-common").sourceSets.test.output
  testImplementation project(":ohara-testing-util").sourceSets.test.output
  testImplementation project(":ohara-connector").sourceSets.main.output
  testImplementation project(":ohara-connector").sourceSets.test.output
  testImplementation project(":ohara-client").sourceSets.test.output
  testImplementation libs.scalatest
  testImplementation libs.junit
  testImplementation libs.akkaStream

  //if (project.hasProperty("ohara.it.jar.folder")) {
    // Load jar file for JDBC driver test
    //fileTree(project.getProperty("ohara.it.jar.folder")).visit { FileVisitDetails jar ->
      testImplementation files("/jar/ojdbc8.jar")
   // }
  //}
}

/**
 * package only streamApp jar.
 */
task streamAppJar(type: Jar, dependsOn: compileJava) {
  from sourceSets.main.output
  include '**/DumbStreamApp**.class'
  archiveName "ohara-streamapp.jar"
}

/**
 * package only source connector.
 */
task sourceJar(type: Jar, dependsOn: compileJava) {
  from sourceSets.main.output
  include '**/connector/DumbSource**.class', "**/connector/package*.class"
  archiveName "ohara-it-source.jar"
}

/**
 * package only sink connector.
 */
task sinkJar(type: Jar, dependsOn: compileJava) {
  from sourceSets.main.output
  include '**/connector/DumbSink**.class', "**/connector/package*.class"
  archiveName "ohara-it-sink.jar"
}

/**
 * a custom test for IT tasks. It initialize the arguments for all tasks.
 */
class OharaTest extends Test {
  static def IT_ARGUMENTS = [
          "ohara.it.docker",
          // hostname used to expose the location of configurator
          "ohara.it.hostname",
          // hostname used to expose the location of configurator
          "ohara.it.port",
          "ohara.it.k8s",
          "ohara.it.k8s.nodename",
          // set the prefix to all containers
          "ohara.it.container.prefix",
          // set database setting
          "ohara.it.oracle.db.url",
          "ohara.it.oracle.db.username",
          "ohara.it.oracle.db.password",
          "ohara.it.postgresql.db.url",
          "ohara.it.postgresql.db.username",
          "ohara.it.postgresql.db.password",
          "ohara.it.jar.folder",
          // set smb setting
          "ohara.it.smb.hostname",
          "ohara.it.smb.port",
          "ohara.it.smb.username",
          "ohara.it.smb.password",
          "ohara.it.smb.shareName",
          // assign "true" to this false to keep all containers created by IT
          "ohara.it.keep.containers"
  ]

  public OharaTest() {
    IT_ARGUMENTS.forEach {
      keyword ->
        if(project.hasProperty(keyword)) environment keyword, project.getProperty(keyword)
    }
    maxParallelForks = 1
    forkEvery = 1
    minHeapSize = minHeapSize
    maxHeapSize = "4096m"
    testLogging {
      events "PASSED", "STARTED", "FAILED", "SKIPPED"
    }
    // generate the testing-purpose jars for IT
    dependsOn 'sourceJar'
    dependsOn 'sinkJar'
    dependsOn 'streamAppJar'
  }
}

/**
 * the junit arguments to test is controlled by root/gradle so we just assign the properties.
 */
test {
  OharaTest.IT_ARGUMENTS.forEach {
    keyword ->
      if(project.hasProperty(keyword)) environment keyword, project.getProperty(keyword)
  }
  // generate the testing-purpose jars for IT
  dependsOn 'sourceJar'
  dependsOn 'sinkJar'
  dependsOn 'streamAppJar'
}

def classOfSshCollieGroup = "com.island.ohara.it.category.SshCollieGroup"
def classOfSshConfiguratorGroup = "com.island.ohara.it.category.SshConfiguratorGroup"
def classOfSshConnectorGroup = "com.island.ohara.it.category.SshConnectorGroup"
def classOfK8sCollieGroup = "com.island.ohara.it.category.K8sCollieGroup"
def classOfK8sConfiguratorGroup = "com.island.ohara.it.category.K8sConfiguratorGroup"
def classOfK8sConnectorGroup = "com.island.ohara.it.category.K8sConnectorGroup"

task sshCollie(type: OharaTest) {
  useJUnit {
    includeCategories classOfSshCollieGroup
  }
}

task sshConfigurator(type: OharaTest) {
  useJUnit {
    includeCategories classOfSshConfiguratorGroup
  }
}

task sshConnector(type: OharaTest) {
  useJUnit {
    includeCategories classOfSshConnectorGroup
  }
}

task k8sCollie(type: OharaTest) {
  useJUnit {
    includeCategories classOfK8sCollieGroup
  }
}

task k8sConfigurator(type: OharaTest) {
  useJUnit {
    includeCategories classOfK8sConfiguratorGroup
  }
}

task k8sConnector(type: OharaTest) {
  useJUnit {
    includeCategories classOfK8sConnectorGroup
  }
}

task otherIT(type: OharaTest) {
  useJUnit {
    excludeCategories classOfSshCollieGroup,
            classOfSshConfiguratorGroup,
            classOfSshConnectorGroup,
            classOfK8sCollieGroup,
            classOfK8sConfiguratorGroup,
            classOfK8sConnectorGroup
  }
}

jar.dependsOn sourceJar
jar.dependsOn sinkJar
jar.dependsOn streamAppJar